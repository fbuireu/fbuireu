name: 'Create and Auto-merge PR'
description: 'Creates a pull request and automatically merges it if successful'
author: 'fbuireu'
inputs:
  token:
    description: 'GitHub token for authentication'
    required: true
    default: ${{ github.token }}
  commit-message:
    description: 'Commit message for the PR'
    required: false
    default: 'docs: update repository assets'
  title:
    description: 'Title of the pull request'
    required: false
    default: 'ü§ñ [AUTOMATED] Update Repository Assets'
  branch:
    description: 'Branch name for the pull request'
    required: false
    default: 'auto-update-${{ github.run_number }}'
  force-merge:
    description: 'Force merge without waiting for checks (use with caution)'
    required: false
    default: 'false'
outputs:
  pull-request-number:
    description: 'The number of the created pull request'
    value: ${{ steps.create-pr.outputs.pull-request-number }}
  pull-request-operation:
    description: 'The operation performed (created, updated, or none)'
    value: ${{ steps.create-pr.outputs.pull-request-operation }}
runs:
  using: 'composite'
  steps:
    - name: Create Pull Request
      id: create-pr
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ inputs.token }}
        commit-message: ${{ inputs.commit-message }}
        title: ${{ inputs.title }}
        body: |
          ## Automated Repository Update
          
          This PR contains updated assets generated automatically.
          
          **Generated on:** ${{ github.run_id }}
          **Workflow:** ${{ github.workflow }}
          **Triggered by:** ${{ github.event_name }}
          
          ---
          *This PR was created automatically and will be auto-merged if all checks pass.*
        branch: ${{ inputs.branch }}
        delete-branch: true
        base: main

    - name: Check PR status and requirements
      if: steps.create-pr.outputs.pull-request-number
      shell: bash
      run: |
        echo "üîç Checking PR status..."
        
        echo "üìã PR Status:"
        pr_info=$(gh pr view ${{ steps.create-pr.outputs.pull-request-number }} --json state,mergeable,statusCheckRollup)
        echo "$pr_info"
        
        checks_count=$(echo "$pr_info" | jq '.statusCheckRollup | length')
        echo "üîé Status checks count: $checks_count"
        
        if [ "$checks_count" -eq 0 ]; then
          echo "‚úÖ No status checks required - PR should be mergeable immediately"
          echo "no_checks=true" >> $GITHUB_OUTPUT
        else
          echo "‚è≥ Status checks detected - will wait for completion"
          echo "no_checks=false" >> $GITHUB_OUTPUT
        fi
      id: check-status
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: Immediate merge (no checks required)
      if: steps.create-pr.outputs.pull-request-number && steps.check-status.outputs.no_checks == 'true' && inputs.force-merge == 'false'
      shell: bash
      run: |
        echo "üöÄ No checks required - attempting immediate merge..."
        
        sleep 5
        
        gh pr ready ${{ steps.create-pr.outputs.pull-request-number }} || true
        
        if gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} --squash --subject "${{ inputs.commit-message }}"; then
          echo "‚úÖ PR merged immediately!"
        else
          echo "‚è≥ Immediate merge failed, enabling auto-merge as fallback..."
          gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} --auto --squash --subject "${{ inputs.commit-message }}"
          
          sleep 10
          pr_state=$(gh pr view ${{ steps.create-pr.outputs.pull-request-number }} --json state --jq '.state' 2>/dev/null || echo "unknown")
          if [ "$pr_state" = "MERGED" ]; then
            echo "‚úÖ Auto-merge completed!"
          else
            echo "‚è≥ Auto-merge enabled, will complete when ready"
          fi
        fi
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: Wait for checks and auto-merge
      if: steps.create-pr.outputs.pull-request-number && steps.check-status.outputs.no_checks == 'false' && inputs.force-merge == 'false'
      shell: bash
      run: |
        echo "‚è≥ Checks detected - enabling auto-merge and waiting..."
        
        gh pr ready ${{ steps.create-pr.outputs.pull-request-number }} || true
        gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} --auto --squash --subject "${{ inputs.commit-message }}"
        
        echo "‚úÖ Auto-merge enabled. Waiting up to 3 minutes for checks to complete..."
        
        for i in {1..18}; do
          sleep 10
          
          pr_state=$(gh pr view ${{ steps.create-pr.outputs.pull-request-number }} --json state --jq '.state')
          if [ "$pr_state" = "MERGED" ]; then
            echo "üéâ PR successfully auto-merged!"
            exit 0
          fi
          
          echo "‚è≥ Attempt $i/18 - PR state: $pr_state"
        done
        
        echo "‚ö†Ô∏è Timeout reached. PR may still auto-merge when checks complete."
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: Force merge (if enabled)
      if: steps.create-pr.outputs.pull-request-number && inputs.force-merge == 'true'
      shell: bash
      run: |
        echo "‚ö†Ô∏è Force merging PR without waiting for checks..."
        
        gh pr ready ${{ steps.create-pr.outputs.pull-request-number }} || true
        
        if gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} --squash --subject "${{ inputs.commit-message }}"; then
          echo "‚úÖ PR force-merged successfully!"
        else
          echo "‚ùå Force merge failed. Enabling auto-merge as fallback..."
          gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} --auto --squash --subject "${{ inputs.commit-message }}"
        fi
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: Report Status
      if: always()
      shell: bash
      run: |
        if [ "${{ steps.create-pr.outputs.pull-request-operation }}" = "created" ]; then
          echo "‚úÖ PR created: #${{ steps.create-pr.outputs.pull-request-number }}"
          
          if [ "${{ steps.create-pr.outputs.pull-request-number }}" != "" ]; then
            pr_state=$(gh pr view ${{ steps.create-pr.outputs.pull-request-number }} --json state --jq '.state' 2>/dev/null || echo "unknown")
            if [ "$pr_state" = "MERGED" ]; then
              echo "üéâ Status: Successfully merged!"
            else
              echo "‚è≥ Status: Auto-merge enabled"
              echo "üîó View PR: ${{ github.server_url }}/${{ github.repository }}/pull/${{ steps.create-pr.outputs.pull-request-number }}"
              
              mergeable=$(gh pr view ${{ steps.create-pr.outputs.pull-request-number }} --json mergeable --jq '.mergeable' 2>/dev/null || echo "unknown")
              if [ "$mergeable" = "UNKNOWN" ]; then
                echo "‚ÑπÔ∏è GitHub is still processing the PR - it may auto-merge shortly"
              elif [ "$mergeable" = "MERGEABLE" ]; then
                echo "‚úÖ PR is mergeable - should auto-merge when conditions are met"
              else
                echo "‚ö†Ô∏è PR mergeable status: $mergeable"
              fi
            fi
          fi
        elif [ "${{ steps.create-pr.outputs.pull-request-operation }}" = "updated" ]; then
          echo "‚úÖ Existing PR updated: #${{ steps.create-pr.outputs.pull-request-number }}"
        else
          echo "‚ÑπÔ∏è No changes detected, no PR needed"
        fi
      env:
        GH_TOKEN: ${{ inputs.token }}
